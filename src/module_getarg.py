'''
    Module:
        Command-line arguments to the plotting applications.
'''
import argparse
from module_utility import str2bool, strs2bool

## Get command-line arguments
def getarg(parser, program):

    # dimension
    if program == 'graph':
        parser.add_argument('-n1', '--n1', type=str, help='number of grid points in axis 1', nargs='+', default=None)
    else:
        parser.add_argument('-n1', '--n1', type=int, help='number of grid points in axis 1', default=None)
    parser.add_argument('-n2', '--n2', type=int, help='number of grid points in axis 2', default=None)
    parser.add_argument('-n3', '--n3', type=int, help='number of grid points in axis 3', default=None)
    parser.add_argument('-o1', '--o1', type=str, help='origin of axis 1', default='0.0')
    parser.add_argument('-o2', '--o2', type=str, help='origin of axis 2', default='0.0')
    parser.add_argument('-o3', '--o3', type=str, help='origin of axis 3', default='0.0')
    parser.add_argument('-d1', '--d1', type=str, help='sampling interval along axis 1', default='1.0')
    parser.add_argument('-d2', '--d2', type=str, help='sampling interval along axis 2', default='1.0')
    parser.add_argument('-d3', '--d3', type=str, help='sampling interval along axis 3', default='1.0')

    # io
    parser.add_argument('-in', '--infile', type=str, help='name(s) of the input file', nargs='+', default=None)
    parser.add_argument('-out', '--outfile', type=str, help='name(s) of the output file', nargs='+', default=None)
    parser.add_argument('-background', '--background', type=str, help='name of the background image file', default=None)
    parser.add_argument('-mask', '--mask', type=str, help='filename of the mask', default=None)
    parser.add_argument('-dtype', '--datatype', type=str, help='numeric type of the input data', default='float')
    parser.add_argument('-endian', '--endian', type=str, help='endianness of the input data', default='little')
    parser.add_argument('-transpose', '--transpose', type=str2bool, help='data/background/mask is stored transposedly', default='n')
    parser.add_argument('-dpi', '--dpi', type=str, help='dpi of the output figure', default='300')

    # processing
    parser.add_argument('-norm', '--norm', type=str, help='norm of the input data; =log plots log(in)', default='linear')
    parser.add_argument('-base', '--base', type=str, help='base of the log when norm=log', default='10')
    parser.add_argument('-flip1', '--flip1', type=str2bool, help='flip the input data along axis 1', default='n')
    parser.add_argument('-flip2', '--flip2', type=str2bool, help='flip the input data along axis 2', default='n')
    parser.add_argument('-flip3', '--flip3', type=str2bool, help='flip the input data along axis 3', default='n')

    # axis
    parser.add_argument('-reverse1', '--reverse1', type=str2bool, help='plot axis 1 reversely', default='n')
    parser.add_argument('-reverse2', '--reverse2', type=str2bool, help='plot axis 2 reversely', default='n')
    parser.add_argument('-reverse3', '--reverse3', type=str2bool, help='plot axis 3 reversely', default='n')
    parser.add_argument('-norm1', '--norm1', type=str, help='norm of axis 1 ticks', default='linear')
    parser.add_argument('-norm2', '--norm2', type=str, help='norm of axis 2 ticks', default='linear')
    parser.add_argument('-norm3', '--norm3', type=str, help='norm of axis 3 ticks', default='linear')
    parser.add_argument('-base1', '--base1', type=str, help='log base of axis 1', default='10')
    parser.add_argument('-base2', '--base2', type=str, help='log base of axis 2', default='10')
    parser.add_argument('-base3', '--base3', type=str, help='log base of axis 3', default='10')
    parser.add_argument('-label1', '--label1', type=str, help='label of axis 1', default='Axis 1')
    parser.add_argument('-label2', '--label2', type=str, help='label of axis 2', default='Axis 2')
    parser.add_argument('-label3', '--label3', type=str, help='label of axis 3', default='Axis 3')
    parser.add_argument('-label1pad', '--label1pad', type=str, help='axis 1 label extra padding away from the axis', default='0.075')
    parser.add_argument('-label2pad', '--label2pad', type=str, help='axis 2 label extra padding away from the axis', default='0.075')
    parser.add_argument('-label3pad', '--label3pad', type=str, help='axis 3 label extra padding away from the axis', default='0.075')
    parser.add_argument('-label1size', '--label1size', type=str, help='font size of axis 1 label', default='16.0')
    parser.add_argument('-label2size', '--label2size', type=str, help='font size of axis 2 label', default='16.0')
    parser.add_argument('-label3size', '--label3size', type=str, help='font size of axis 3 label', default='16.0')
    parser.add_argument('-label1loc', '--label1loc', type=str, help='axis 1 label location', default=None)
    parser.add_argument('-label2loc', '--label2loc', type=str, help='axis 2 label location', default=None)
    parser.add_argument('-label3loc', '--label3loc', type=str, help='axis 3 label location', default=None)
    parser.add_argument('-x1beg', '--x1beg', type=str, help='axis 1 lower end to plot', default=None)
    parser.add_argument('-x1end', '--x1end', type=str, help='axis 1 higher end to plot', default=None)
    parser.add_argument('-x2beg', '--x2beg', type=str, help='axis 2 lower end to plot', default=None)
    parser.add_argument('-x2end', '--x2end', type=str, help='axis 2 higher end to plot', default=None)
    parser.add_argument('-x3beg', '--x3beg', type=str, help='axis 3 lower end to plot', default=None)
    parser.add_argument('-x3end', '--x3end', type=str, help='axis 3 higher end to plot', default=None)
    parser.add_argument('-hideticks', '--hideticks', type=str2bool, help='hide all ticks', default='n')
    parser.add_argument('-ticks1', '--ticks1', type=str, help='set arbitrary ticks on axis 1 by x:y,x:y,...', nargs='+', default=None)
    parser.add_argument('-ticks2', '--ticks2', type=str, help='set arbitrary ticks on axis 2 by x:y,x:y,...', nargs='+', default=None)
    parser.add_argument('-ticks3', '--ticks3', type=str, help='set arbitrary ticks on axis 3 by x:y,x:y,...', nargs='+', default=None)
    parser.add_argument('-tick1beg', '--tick1beg', type=str, help='first tick along axis 1', default=None)
    parser.add_argument('-tick2beg', '--tick2beg', type=str, help='first tick along axis 2', default=None)
    parser.add_argument('-tick3beg', '--tick3beg', type=str, help='first tick along axis 3', default=None)
    parser.add_argument('-tick1end', '--tick1end', type=str, help='last tick along axis 1', default=None)
    parser.add_argument('-tick2end', '--tick2end', type=str, help='last tick along axis 2', default=None)
    parser.add_argument('-tick3end', '--tick3end', type=str, help='last tick along axis 3', default=None)
    parser.add_argument('-tick1d', '--tick1d', type=str, help='tick interval along axis 1', default=None)
    parser.add_argument('-tick2d', '--tick2d', type=str, help='tick interval along axis 2', default=None)
    parser.add_argument('-tick3d', '--tick3d', type=str, help='tick interval along axis 3', default=None)
    parser.add_argument('-mtick1', '--mtick1', type=int, help='number of minor ticks between two major ticks along axis 1', default=0)
    parser.add_argument('-mtick2', '--mtick2', type=int, help='number of minor ticks between two major ticks along axis 2', default=0)
    parser.add_argument('-mtick3', '--mtick3', type=int, help='number of minor ticks between two major ticks along axis 3', default=0)
    parser.add_argument('-tick1size', '--tick1size', type=str, help='font size of axis 1 tick labels', default=None)
    parser.add_argument('-tick2size', '--tick2size', type=str, help='font size of axis 2 tick labels', default=None)
    parser.add_argument('-tick3size', '--tick3size', type=str, help='font size of axis 3 tick labels', default=None)
    parser.add_argument('-tickmajorlen', '--tickmajorlen', type=str, help='length of major ticks', default='5.0')
    parser.add_argument('-tickminorlen', '--tickminorlen', type=str, help='length of minor ticks', default=None)
    parser.add_argument('-tickmajorwid', '--tickmajorwid', type=str, help='width of major ticks', default='1.0')
    parser.add_argument('-tickminorwid', '--tickminorwid', type=str, help='with of minor ticks', default=None)
    parser.add_argument('-tick1format', '--tick1format', type=str, help='format of ticks on axis 1', default='sci')
    parser.add_argument('-tick2format', '--tick2format', type=str, help='format of ticks on axis 2', default='sci')
    parser.add_argument('-tick3format', '--tick3format', type=str, help='format of ticks on axis 3', default='sci')
    parser.add_argument('-tick1rot', '--tick1rot', type=str, help='axis 1 tick label rotation', default='0.0')
    parser.add_argument('-tick2rot', '--tick2rot', type=str, help='axis 2 tick label rotation', default='0.0')
    parser.add_argument('-tick3rot', '--tick3rot', type=str, help='axis 3 tick label rotation', default='0.0')
    parser.add_argument('-tick1label', '--tick1label', type=str2bool, help='axis 1 tick labels', default='y')
    parser.add_argument('-tick2label', '--tick2label', type=str2bool, help='axis 2 tick labels', default='y')
    parser.add_argument('-tick3label', '--tick3label', type=str2bool, help='axis 3 tick labels', default='y')
    parser.add_argument('-frameleft', '--frameleft', type=str2bool, help='show left frame', default='y')
    parser.add_argument('-frameright', '--frameright', type=str2bool, help='show right frame', default='y')
    parser.add_argument('-frametop', '--frametop', type=str2bool, help='show top frame', default='y')
    parser.add_argument('-framebottom', '--framebottom', type=str2bool, help='show bottom frame', default='y')
    parser.add_argument('-tickleft', '--tickleft', type=str2bool, help='ticks on the left axis', default='y')
    parser.add_argument('-tickright', '--tickright', type=str2bool, help='ticks on the right axis', default='n')
    if program == 'graph':
        parser.add_argument('-ticktop', '--ticktop', type=str2bool, help='ticks on the top axis', default='n')
        parser.add_argument('-tickbottom', '--tickbottom', type=str2bool, help='ticks on the bottom axis', default='y')
    else:
        parser.add_argument('-ticktop', '--ticktop', type=str2bool, help='ticks on the top axis', default='y')
        parser.add_argument('-tickbottom', '--tickbottom', type=str2bool, help='ticks on the bottom axis', default='n')

    # color
    parser.add_argument('-ncolor', '--ncolor', type=int, help='number of colors in the colormap', default=256)
    parser.add_argument('-color', '--colormap', type=str, help='colormap', default=None)
    parser.add_argument('-cscale', '--colorscale', type=str, help='multiply the input with cscale', default=None)
    parser.add_argument('-clip', '--clip', type=str, help='clipt the input by [-clip, +clip]', default=None)
    parser.add_argument('-cmin', '--cmin', type=str, help='min value to plot', default=None)
    parser.add_argument('-cmax', '--cmax', type=str, help='max value to plot', default=None)
    parser.add_argument('-cperc', '--cperc', type=str, help='percent of dmin, dmax] to plot', default='100.0')
    parser.add_argument('-alphas', '--alphas', type=str, help='value:alpha pairs to specify the alpha map', default=None)
    parser.add_argument('-ctruncbeg', '--ctruncbeg', type=str, help='colormap truncation lower end', default='0.0')
    parser.add_argument('-ctruncend', '--ctruncend', type=str, help='colormap truncation higher end', default='1.0')
    parser.add_argument('-backcolor', '--backcolormap', type=str, help='colormap of the background image', default='hsv')
    parser.add_argument('-backcscale', '--backcolorscale', type=str, help='multiply the background image with cscale', default=None)
    parser.add_argument('-backclip', '--backclip', type=str, help='clip the background image by [-backclip, +backclip]', default=None)
    parser.add_argument('-backcmin', '--backcmin', type=str, help='min value to plot of the background image', default=None)
    parser.add_argument('-backcmax', '--backcmax', type=str, help='max value to plot of the background image', default=None)
    parser.add_argument('-backcperc', '--backcperc', type=str, help='percent of [dmin, dmax] to plot for the background image', default='100.0')
    parser.add_argument('-backalphas', '--backalphas', type=str, help='alpha map of the background image', default=None)
    parser.add_argument('-backctruncbeg', '--backctruncbeg', type=str, help='background colormap truncation lower end', default='0.0')
    parser.add_argument('-backctruncend', '--backctruncend', type=str, help='background colormap truncation higher end', default='1.0')

    # colorbar
    parser.add_argument('-legend', '--legend', type=str2bool, help='show colorbar', default='n')
    parser.add_argument('-backlegend', '--backlegend', type=str2bool, help='show colorbar for the background image', default='n')
    parser.add_argument('-lloc', '--lloc', type=str, help='colorbar location', default='right')
    parser.add_argument('-lpad', '--lpad', type=str, help='colorbar pad away from plot', default=None)
    parser.add_argument('-lheight', '--lheight', type=str, help='colorbar height in inches', default=None)
    parser.add_argument('-lwidth', '--lwidth', type=str, help='colorbar width in inches', default=None)
    parser.add_argument('-ld', '--ld', type=str, help='colorbar tick interval', default=None)
    parser.add_argument('-ltickbeg', '--ltickbeg', type=str, help='colorbar tick begin', default=None)
    parser.add_argument('-ltickend', '--ltickend', type=str, help='colorbar tick end', default=None)
    parser.add_argument('-lticksize', '--lticksize', type=str, help='colorbar tick label font size', default=None)
    parser.add_argument('-lmtick', '--lmtick', type=int, help='number of minor ticks between two major colorbar ticks', default=0)
    parser.add_argument('-lreverse', '--lreverse', type=str2bool, help='reverse colorbar', default='n')
    parser.add_argument('-unit', '--unit', type=str, help='the unit of the data', default=None)
    parser.add_argument('-unitsize', '--unitsize', type=str, help='font size of the unit.', default=None)
    parser.add_argument('-unitpad', '--unitpad', type=str, help='colorbar unit pad distance', default=None)

    # grid
    parser.add_argument('-grid1', '--grid1', type=str2bool, help='grid lines along axis 1', default='n')
    parser.add_argument('-grid2', '--grid2', type=str2bool, help='grid lines along axis 2', default='n')
    parser.add_argument('-grid3', '--grid3', type=str2bool, help='grid lines along axis 3', default='n')
    parser.add_argument('-grid1width', '--grid1width', type=str, help='width of grid lines along axis 1', default=None)
    parser.add_argument('-grid2width', '--grid2width', type=str, help='width of grid lines along axis 2', default=None)
    parser.add_argument('-grid3width', '--grid3width', type=str, help='width of grid lines along axis 3', default=None)
    parser.add_argument('-grid1color', '--grid1color', type=str, help='color of grid lines along axis 1', default='gray')
    parser.add_argument('-grid2color', '--grid2color', type=str, help='color of grid lines along axis 2', default='gray')
    parser.add_argument('-grid3color', '--grid3color', type=str, help='color of grid lines along axis 3', default='gray')
    parser.add_argument('-grid1style', '--grid1style', type=str, help='style of grid lines perpendicular to axis 1', default='--')
    parser.add_argument('-grid2style', '--grid2style', type=str, help='style of grid lines perpendicular to axis 2', default='--')
    parser.add_argument('-grid3style', '--grid3style', type=str, help='style of grid lines perpendicular to axis 3', default='--')
    parser.add_argument('-mgrid1', '--mgrid1', type=str2bool, help='minor grid lines along axis 1', default='n')
    parser.add_argument('-mgrid2', '--mgrid2', type=str2bool, help='minor grid lines along axis 2', default='n')
    parser.add_argument('-mgrid3', '--mgrid3', type=str2bool, help='minor grid lines along axis 3', default='n')
    parser.add_argument('-mgrid1width', '--mgrid1width', type=str, help='width of minor grid lines along axis 1', default=None)
    parser.add_argument('-mgrid2width', '--mgrid2width', type=str, help='width of minor grid lines along axis 2', default=None)
    parser.add_argument('-mgrid3width', '--mgrid3width', type=str, help='width of minor grid lines along axis 3', default=None)
    parser.add_argument('-mgrid1color', '--mgrid1color', type=str, help='color of minor grid lines along axis 1', default='k')
    parser.add_argument('-mgrid2color', '--mgrid2color', type=str, help='color of minor grid lines along axis 2', default='k')
    parser.add_argument('-mgrid3color', '--mgrid3color', type=str, help='color of minor grid lines along axis 3', default='k')
    parser.add_argument('-mgrid1style', '--mgrid1style', type=str, help='style of minor grid lines perpendicular to axis 1', default=':')
    parser.add_argument('-mgrid2style', '--mgrid2style', type=str, help='style of minor grid lines perpendicular to axis 2', default=':')
    parser.add_argument('-mgrid3style', '--mgrid3style', type=str, help='style of minor grid lines perpendicular to axis 3', default=':')

    # title
    parser.add_argument('-title', '--title', type=str, help='title', default=None)
    parser.add_argument('-titlesize', '--titlesize', type=str, help='title font size', default=None)
    parser.add_argument('-titlex', '--titlex', type=str, help='title position in the horizontal direction', default='0.50')
    parser.add_argument('-titley', '--titley', type=str, help='title position in the vertical direction', default='1.25')

    # volume
    if program in ['volume', 'volcon']:
        parser.add_argument('-axis1loc', '--axis1loc', type=str, help='location of axis 1', default='left')
        parser.add_argument('-axis2loc', '--axis2loc', type=str, help='location of axis 2', default='top')
        parser.add_argument('-axis3loc', '--axis3loc', type=str, help='location of axis 3', default='top')
        parser.add_argument('-angle', '--angle', type=str, help='''angles specify the view in [0, 90]x[0, 90] degs''', nargs='+', default=None)
        parser.add_argument('-octant', '--octant', type=str, help='view from which octant', default='--+')
        parser.add_argument('-centerframe', '--centerframe', type=str2bool, help='show center frame in the volume plot', default='y')

    # slice
    if program in ['volume', 'volcon', 'slice', 'slicon']:
        parser.add_argument('-slice1', '--slice1', type=str, help='slice 1 position in real value', default=None)
        parser.add_argument('-slice2', '--slice2', type=str, help='slice 2 position in real value', default=None)
        parser.add_argument('-slice3', '--slice3', type=str, help='slice 3 position in real value', default=None)
    if program in ['slice', 'slicon']:
        parser.add_argument('-slicegap', '--slicegap', type=str, help='white space in inches between orthogonal slices', default='0.1')
        parser.add_argument('-sliceline1', '--sliceline1', type=str2bool, help='show position of slice 1 with a line', default='y')
        parser.add_argument('-sliceline2', '--sliceline2', type=str2bool, help='show position of slice 2 with a line', default='y')
        parser.add_argument('-sliceline3', '--sliceline3', type=str2bool, help='show position of slice 3 with a line', default='y')
        parser.add_argument('-sliceline1width', '--sliceline1width', type=str, help='slice 1 line width', default='1.0')
        parser.add_argument('-sliceline2width', '--sliceline2width', type=str, help='slice 2 line width', default='1.0')
        parser.add_argument('-sliceline3width', '--sliceline3width', type=str, help='slice 3 line width', default='1.0')
        parser.add_argument('-sliceline1color', '--sliceline1color', type=str, help='slice 1 line color', default='k')
        parser.add_argument('-sliceline2color', '--sliceline2color', type=str, help='slice 2 line color', default='k')
        parser.add_argument('-sliceline3color', '--sliceline3color', type=str, help='slice 3 line color', default='k')
        parser.add_argument('-sliceline1style', '--sliceline1style', type=str, help='slice 1 line style', default='-')
        parser.add_argument('-sliceline2style', '--sliceline2style', type=str, help='slice 2 line style', default='-')
        parser.add_argument('-sliceline3style', '--sliceline3style', type=str, help='slice 3 line style', default='-')

    # annotations
    parser.add_argument('-curve', '--curve', type=str, help='filename of curves', nargs='+', default=None)
    parser.add_argument('-curvestyle', '--curvestyle', type=str, help='curve line styles', nargs='+', default=None)
    parser.add_argument('-curvesize', '--curvesize', type=str, help='curve line width or scatter marker size', nargs='+', default=None)
    parser.add_argument('-curvecolor', '--curvecolor', type=str, help='curve color', nargs='+', default=None)
    parser.add_argument('-curvefacecolor', '--curvefacecolor', type=str, help='curve face color', nargs='+', default=None)
    parser.add_argument('-curveedgecolor', '--curveedgecolor', type=str, help='curve edge color', nargs='+', default=None)
    parser.add_argument('-curveorder', '--curveorder', type=str, help='curve plot order', nargs='+', default=None)
    parser.add_argument('-text', '--text', type=str, help='text label', nargs='+', default=None)
    parser.add_argument('-textstyle', '--textstyle', type=str, help='text label style', nargs='+', default=None)
    parser.add_argument('-textloc', '--textloc', type=str, help='text label position in real value', nargs='+', default=None)
    parser.add_argument('-textrotation', '--textrotation', type=str, help='text label rotation', nargs='+', default=None)
    parser.add_argument('-textsize', '--textsize', type=str, help='text label font size', nargs='+', default=None)
    parser.add_argument('-textcolor', '--textcolor', type=str, help='text label color', nargs='+', default=None)
    parser.add_argument('-textbox', '--textbox', type=str, help='text label bounding box', nargs='+', default=None)
    parser.add_argument('-textboxedgecolor', '--textboxedgecolor', type=str, help='text label bounding box edge color', nargs='+', default=None)
    parser.add_argument('-textboxfacecolor', '--textboxfacecolor', type=str, help='text label bounding box face color', nargs='+', default=None)
    parser.add_argument('-textboxalpha', '--textboxalpha', type=str, help='text label bounding box transparency', nargs='+', default=None)
    parser.add_argument('-textboxpad', '--textboxpad', type=str, help='text label bounding box pad size', nargs='+', default=None)
    parser.add_argument('-textboxstyle', '--textboxstyle', type=str, help='text label bounding box style', nargs='+', default=None)
    parser.add_argument('-textorder', '--textorder', type=str, help='text label plot order', nargs='+', default=None)
    parser.add_argument('-arrow', '--arrow', type=str, help='arrow with or without head or tail', nargs='+', default=None)
    parser.add_argument('-arrowfacecolor', '--arrowfacecolor', type=str, help='arrow face colors', nargs='+', default=None)
    parser.add_argument('-arrowedgecolor', '--arrowedgecolor', type=str, help='arrow edge colors', nargs='+', default=None)
    parser.add_argument('-arrowlinestyle', '--arrowlinestyle', type=str, help='arrow line style', nargs='+', default=None)
    parser.add_argument('-arrowstyle', '--arrowstyle', type=str, help='arrow head/tail style', nargs='+', default=None)
    parser.add_argument('-arrowconnect', '--arrowconnect', type=str, help='arrow connection style', nargs='+', default=None)
    parser.add_argument('-arrowwidth', '--arrowwidth', type=str, help='arrow line width', nargs='+', default=None)
    parser.add_argument('-arroworder', '--arroworder', type=str, help='arrow plot order', nargs='+', default=None)
    parser.add_argument('-polygon', '--polygon', type=str, help='polygon', nargs='+', default=None)
    parser.add_argument('-polygonfacecolor', '--polygonfacecolor', type=str, help='polygon facecolors', nargs='+', default=None)
    parser.add_argument('-polygonedgecolor', '--polygonedgecolor', type=str, help='polygon edgecolors', nargs='+', default=None)
    parser.add_argument('-polygonalpha', '--polygonalpha', type=str, help='polygon transparencies', nargs='+', default=None)
    parser.add_argument('-polygonlinestyle', '--polygonlinestyle', type=str, help='polygon line styles', nargs='+', default=None)
    parser.add_argument('-polygonlinewidth', '--polygonlinewidth', type=str, help='polygon line widths', nargs='+', default=None)
    parser.add_argument('-polygonorder', '--polygonorder', type=str, help='polygon plot order', nargs='+', default=None)
    parser.add_argument('-circle', '--circle', type=str, help='circle coordinates, radius, and rotation', nargs='+', default=None)
    parser.add_argument('-circlefacecolor', '--circlefacecolor', type=str, help='circle face colors', nargs='+', default=None)
    parser.add_argument('-circleedgecolor', '--circleedgecolor', type=str, help='circle edge colors', nargs='+', default=None)
    parser.add_argument('-circlealpha', '--circlealpha', type=str, help='circle transparencies', nargs='+', default=None)
    parser.add_argument('-circlelinestyle', '--circlelinestyle', type=str, help='circle line styles', nargs='+', default=None)
    parser.add_argument('-circlelinewidth', '--circlelinewidth', type=str, help='circle line widths', nargs='+', default=None)
    parser.add_argument('-circleorder', '--circleorder', type=str, help='circle plot order', nargs='+', default=None)

    # graph
    if program in ['graph']:
        parser.add_argument('-close', '--close', type=strs2bool, help='close curve', default=None)
        parser.add_argument('-select', '--select', type=str, help='select specific columns of second dimension', nargs='+', default=None)
        parser.add_argument('-ftype', '--filetype', type=str, help='file format', default='binary')
        parser.add_argument('-ptype', '--plottype', type=int, help='type of plot', default=1)
        parser.add_argument('-projection', '--projection', type=str, help='type of projection', default='cartesian')
        parser.add_argument('-linestyle', '--linestyle', type=str, help='line style', nargs='+', default=None)
        parser.add_argument('-linewidth', '--linewidth', type=str, help='line width', nargs='+', default=None)
        parser.add_argument('-linecolor', '--linecolor', type=str, help='line color', nargs='+', default=None)
        parser.add_argument('-linealpha', '--linealpha', type=str, help='line transparency', nargs='+', default=None)
        parser.add_argument('-marker', '--marker', type=str, help='marker style', nargs='+', default=None)
        parser.add_argument('-markerevery', '--markerevery', type=str, help='marker every', nargs='+', default=None)
        parser.add_argument('-markersize', '--markersize', type=str, help='marker size', nargs='+', default=None)
        parser.add_argument('-markerfacecolor', '--markerfacecolor', type=str, help='marker face color', nargs='+', default=None)
        parser.add_argument('-markeredgecolor', '--markeredgecolor', type=str, help='marker edge color', nargs='+', default=None)
        parser.add_argument('-markeralpha', '--markeralpha', type=str, help='marker transparency', nargs='+', default=None)
        parser.add_argument('-markersizemax', '--markersizemax', type=str, help='maximum marker size', nargs='+', default=None)
        parser.add_argument('-markersizemin', '--markersizemin', type=str, help='minimum marker size', nargs='+', default=None)

    # contour
    if program in ['contour', 'slicon', 'volcon']:
        parser.add_argument('-contours', '--contours', type=str, help='free contour values', nargs='+', default=None)
        parser.add_argument('-contourbeg', '--contourbeg', type=str, help='the first contour value', default=None)
        parser.add_argument('-contourend', '--contourend', type=str, help='the last contour value', default=None)
        parser.add_argument('-contourcolor', '--contourcolor', type=str, help='color of major contours', nargs='+', default='k')
        parser.add_argument('-contourwidth', '--contourwidth', type=str, help='with of major contours', default='1.0')
        parser.add_argument('-contourstyle', '--contourstyle', type=str, help='style of major contours', default='-')
        parser.add_argument('-contourlevel', '--contourlevel', type=str, help='interval of major contours', default=None)
        parser.add_argument('-clabelsize', '--clabelsize', type=str, help='font size of major contour labels', default=None)
        parser.add_argument('-clabelcolor', '--clabelcolor', type=str, help='color of major contour labels', default='k')
        parser.add_argument('-clabelbackcolor', '--clabelbackcolor', type=str, help='background color of major contour labels', default=None)
        parser.add_argument('-mcontour', '--mcontour', type=int, help='number of minor contours between any two major contours', default=0)
        parser.add_argument('-mcontourwidth', '--mcontourwidth', type=str, help='width of minor contours', default=None)
        parser.add_argument('-mcontourstyle', '--mcontourstyle', type=str, help='style of minor contours', default='-')
        parser.add_argument('-contourfill', '--contourfill', type=str2bool, help='fill contours', default='n')

    # wiggle
    if program in ['wiggle']:
        parser.add_argument('-wigglecolor', '--wigglecolor', type=str, help='wiggle color', nargs='+', default='k,b,r,g,y,p,c')
        parser.add_argument('-wigglewidth', '--wigglewidth', type=str, help='wiggle width', nargs='+', default=None)
        parser.add_argument('-wigglestyle', '--wigglestyle', type=str, help='wiggle style', nargs='+', default=None)
        parser.add_argument('-axispad', '--axispad', type=str, help='pad space of plot', default='0.1')
        parser.add_argument('-interp1', '--interp1', type=str, help='ratio of interpolation along axis 1', default=None)
        parser.add_argument('-interp2', '--interp2', type=str, help='ratio of interpolation along axis 2', default=None)
        parser.add_argument('-along', '--along', type=int, help='plot wiggles along which axis', default=1)
        parser.add_argument('-fill', '--fill', type=int, help='fill the wiggle', default=0)
        parser.add_argument('-every', '--every', type=int, help='plot a subset of wiggles', default=1)
        parser.add_argument('-wiggleloc', '--wiggleloc', type=str, help='ascii file containing the spatial location of traces', default=None)
        parser.add_argument('-wx1beg', '--wx1beg', type=str, help='axis 1 begin value, in consistent with the real value of axis', default=None)
        parser.add_argument('-wx1end', '--wx1end', type=str, help='axis 1 end value, in consistent with the real value of axis', default=None)
        parser.add_argument('-wx2beg', '--wx2beg', type=str, help='axis 2 begin value, in consistent with the real value of axis', default=None)
        parser.add_argument('-wx2end', '--wx2end', type=str, help='axis 2 end value, in consistent with the real value of axis', default=None)
    if program in ['wiggle', 'graph']:
        parser.add_argument('-plotlabel', '--plotlabel', type=str, help='labels of different wiggles/graphs', nargs='+', default=None)
        parser.add_argument('-plotlabelloc', '--plotlabelloc', type=str, help='wiggle label location', default='upper_right')
        parser.add_argument('-plotlabelsize', '--plotlabelsize', type=str, help='wiggle label font size', default='14.0')
        parser.add_argument('-fillwrt', '--fillwrt', type=str, help='fill the curve w.r.t. to line, e.g., y=0 or x=0', nargs='+', default=None)
        parser.add_argument('-fillcolor', '--fillcolor', type=str, help='fill (w.r.t line) with color', nargs='+', default=None)
        parser.add_argument('-fillalpha', '--fillalpha', type=str, help='fill (w.r.t line) with transparency', nargs='+', default=None)

    # misc
    parser.add_argument('-font', '--font', type=str, help='font style of the texts/labels', default='arial')
    parser.add_argument('-type3font', '--type3font', type=str2bool, help='use type-3 font', default='y')
    parser.add_argument('-tr', '--topright', type=str, help='name of the image file added to the top-right corner of the slice plot', default=None)
    parser.add_argument('-render', '--render', type=str, help='type of slice rendering', default='2d')
    parser.add_argument('-size1', '--size1', type=str, help='physical size of axis 1', default=None)
    parser.add_argument('-size2', '--size2', type=str, help='physical size of axis 2', default=None)
    parser.add_argument('-size3', '--size3', type=str, help='physical size of axis 3', default=None)
    parser.add_argument('-interp', '--interp', type=str, help='interpolation method for the image', default='none')
    parser.add_argument('-backinterp', '--backinterp', type=str, help='interpolation method for the background image', default='none')
    parser.add_argument('-imageonly', '--imageonly', type=str2bool, help='output the plotting region only without frame or axes', default='n')
    parser.add_argument('-direction', '--direction', type=str, help='direction of the final image', default='horizontal')
    parser.add_argument('-overlay', '--overlay', type=str2bool, help='overlay contours/wiggles on its corresponding image', default='n')

    return parser
